import sys
import os
import numpy as np
import pickle

from gcode_to_waypoints import gcode_to_waypoints
from waypoints_to_trajectory import waypoints_to_trajectory

'''
Generates a drone position and velocity trajectory at specified
command rate from gcode file generated by the mandoline slicer

gcode units:
    - Length [mm]
    - Feed rate [mm/min]

trajectory units - SI [m], [s]

Usage:
`python gcode_to_trajectory.py gcodeFilePath.gcode COMMAND_RATE`
where COMMAND_RATE is in Hz and is an optional argument
'''

def gcode_to_trajectory(gcodeFileName, cmd_rate = 10):
    waypoint_dictionary = gcode_to_waypoints(gcodeFileName)
    trajectory_dictionary = waypoints_to_trajectory(waypoint_dictionary, command_rate = cmd_rate)
    return trajectory_dictionary

def main():
    if len(sys.argv) < 2:
        sys.exit('Must provide gcode filename')
    fname = sys.argv[1]

    if not os.path.isfile(fname):
        sys.exit('gcode file does not exist')

    COMMAND_RATE = 10   # [Hz] (default)
    if len(sys.argv) >= 3:
        COMMAND_RATE = int(sys.argv[2])

    trajectory = gcode_to_trajectory(fname, cmd_rate = COMMAND_RATE)

    ### Save trajectory as a pickle file
    with open(fname[:-6]+"_trajectory_"+str(COMMAND_RATE)+"Hz.pickle", "wb") as pkl_handle:
	    pickle.dump(trajectory, pkl_handle)

if __name__ == '__main__':
    main()
